package com.online.shop.controller;import com.online.shop.domain.*;import com.online.shop.repository.OrderItemRepository;import com.online.shop.service.OrderService;import com.online.shop.service.ProductService;import com.online.shop.service.UserAccountService;import com.sun.org.apache.xpath.internal.operations.Or;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpRequest;import org.springframework.http.HttpStatus;import org.springframework.security.core.userdetails.User;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.*;import javax.servlet.annotation.HttpConstraint;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.util.ArrayList;import java.util.Arrays;import java.util.List;/** * Created by razvan on 3/25/2017. */@Controllerpublic class CartController extends DefaultController {    @Autowired    private OrderService orderService;    @Autowired    private ProductService productService;    @Autowired    private OrderItemRepository orderItemRepository;    @Autowired    private UserAccountService userAccountService;    @RequestMapping(value = "/add/{id}/{quantity}", method = RequestMethod.POST)    public void addToCart(@PathVariable("id") long id, @PathVariable("quantity") int quantity,  HttpServletRequest request, HttpServletResponse response){        Order order;        List<Order> orders = new ArrayList<Order>();        UserAccount userAccount = new UserAccount();        if(super.isLoggedIn()) {            orders = orderService.findByUserAccountIdAndDone(super.getCurrentUser().getId(), 0);        }        else{            final String[] accountName = new String[1];            accountName[0] = "Error";            Arrays.asList(request.getCookies()).forEach(cookie -> {                if(cookie.getName().equals("CookieUser")){                    accountName[0] = cookie.getValue();                }            });            userAccount = userAccountService.findByUsername(accountName[0]);            if(userAccount != null) {                orders = orderService.findByUserAccountIdAndDone(userAccount.getId(), 0);            }        }        OrderItem orderItem = new OrderItem();        if(orders.size() == 0){            order = new Order();            order.setDone(0);            order.setAccount(userAccount);            order.setDelivered(false);            orderService.save(order);            orderItem.setProduct(productService.findById(id));            orderItem.setQuantity(quantity);            orderItem.setId(id);            orderItem.setOrder(order);            orderItemRepository.save(orderItem);        }        else{            boolean ok = true;            order = orders.get(0);            for (OrderItem existingOrderItem : order.getOrderItems()){                if(existingOrderItem.getProduct().getId() == id){                    existingOrderItem.setQuantity(existingOrderItem.getQuantity() + quantity);                    ok = false;                    break;                }            }            if (ok == true){                orderItem.setProduct(productService.findById(id));                orderItem.setQuantity(quantity);                orderItem.setId(id);                orderItem.setOrder(order);                order.getOrderItems().add(orderItem);            }            response.setStatus(200);            orderService.save(order);        }    }    @RequestMapping(value = "/displayCart", method=RequestMethod.GET, produces="application/json")    public @ResponseBody List<CartItem> getOrderItems(HttpServletRequest request){        List<Order> orders = new ArrayList<Order>();        if(super.isLoggedIn()) {            orders = orderService.findByUserAccountIdAndDone(super.getCurrentUser().getId(), 0);        }        else {            final String[] accountName = new String[1];            accountName[0] = "Error";            Arrays.asList(request.getCookies()).forEach(cookie -> {                if(cookie.getName().equals("CookieUser")){                    accountName[0] = cookie.getValue();                }            });            UserAccount userAccount = userAccountService.findByUsername(accountName[0]);            if(userAccount != null) {                orders = orderService.findByUserAccountIdAndDone(userAccount.getId(), 0);            }        }        List <CartItem> cartItems= new ArrayList<>();        if(orders.size() > 0) {            orders.get(0).getOrderItems().forEach(orderItem -> cartItems.add(new CartItem(orderItem.getId(), orderItem.getProduct(), orderItem.getQuantity())));        }        return  cartItems;    }    @RequestMapping(value = "/deleteOrderItem/{id}", method=RequestMethod.DELETE)    @ResponseStatus(value = HttpStatus.OK)    public void deleteOrderItem(@PathVariable("id") long id){        orderItemRepository.delete(id);    }    @RequestMapping(value = "/viewCart", method = RequestMethod.GET)    public String viewCart(Model model, HttpServletRequest request){        double total = 0;        List<Order> orders = new ArrayList<Order>();        if(super.isLoggedIn()) {            orders = orderService.findByUserAccountIdAndDone(super.getCurrentUser().getId(), 0);        }        else {            final String[] accountName = new String[1];            accountName[0] = "Error";            Arrays.asList(request.getCookies()).forEach(cookie -> {                if(cookie.getName().equals("CookieUser")){                    accountName[0] = cookie.getValue();                }            });            UserAccount userAccount = userAccountService.findByUsername(accountName[0]);            if(userAccount != null) {                orders = orderService.findByUserAccountIdAndDone(userAccount.getId(), 0);            }        }        List <CartItem> cartItems= new ArrayList<>();        orders.get(0).getOrderItems().forEach(orderItem -> cartItems.add(new CartItem(orderItem.getId(),orderItem.getProduct(), orderItem.getQuantity())));        for (CartItem cartItem: cartItems) {            total += cartItem.getQuantity()* cartItem.getProduct().getPrice();        }        model.addAttribute("total", total);        model.addAttribute("cartItems", cartItems);        model.addAttribute("contentTemplate", "viewCart.jsp");        return "index";    }}